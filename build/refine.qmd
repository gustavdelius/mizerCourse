---
title: "Refine your model"
---

## Introduction

In this tutorial we will start to refine the mizer model that we created in the [previous tutorial](create-first-model.qmd). That model already has the broad features correct: In all the species we decided to include are coexisting in a steady state with the desired biomasses and growth rates. Mizer itself determined the size distribution of the species. We did not need to specify many parameters to achieve that. For most of the parameters that we did supply we said that it did not matter that we could only make educated guesses for their values or even just put `NA`, because we could refine the model later. We will start this refinement process in this tutorial and continue it in the next.

```{r}
#| message: false
library(mizer)
library(mizerExperimental)
library(tidyverse)
```

We load the model we created in the [previous tutorial](create-first-model.qmd).

```{r}
cel_model <- readParams("cel_model.rds")
```

## Resource abundance

One bit of information that we did not supply when we set up the model was the abundance of the resource. Let us take a look at the size-spectrum plot to see what value mizer chose:

```{r}
plotlySpectra(cel_model, power = 2, total = TRUE)
```

We have put `total = TRUE` to include the total community spectrum in the plot in black. At the smallest sizes the community is comprised of the resource only, plotted in green, but then at larger sizes the fish contribute. Sheldon's observation was that the community size spectrum would be approximately flat all the way from bacteria to whales. We notice that the above plot does not quite conform to that observation. Instead, the spectrum is quite a bit lower at small sizes, then rises at the sizes where the fish dominate. It then drops off again because we have not included anything larger than cod in our model. No whales here. To get a community spectrum more in line with Sheldon's observation we should increase the resource abundance

There is another plot that shows us that our model currently has too little resource. We plot the feeding level:

```{r}
plotFeedingLevel(cel_model)
```

Recall from the [section on the feeding level](../understand/predation-growth-and-mortality.qmd#feeding-level) in Part 1 of the course that the feeding level is the ratio between the maximum intake rate and the actual intake rate, so can never exceed 1. The closer it is to 1 the more satiated the fish is and the less of the encountered prey it will consume. The reason the feeding levels in the above plot is higher at larger sizes than at smaller sizes is that at larger sizes the fish start feeding on other fish while at smaller sizes they have to rely on the resource, and the resource is not as abundant as it should be.

We will now want to increase the abundance of resource, both to get the community abundance more in line with Sheldon's observation and to give the fish a more constant feeding level throughout their life. We will first start doing this the tedious way in code and then introduce the `tuneParams()` shiny gadget to do it with point and click.

### Code

We don't know by exactly what factor we need to scale up the resource. Let's try increasing it by a factor of 2:

```{r warning=FALSE}
cel_model <- scaleDownBackground(cel_model, factor = 1/2)
```

That the function scales down rather than up, so that we need to set the scaling factor to 1/2 rather than 2, is a historical accident. Let's look at the spectrum plot now:

```{r}
plotlySpectra(cel_model, power = 2, total = TRUE)
```

The resource has increased by a factor of 2, even if this is not very noticeable on this logarithmic y axis. But we are now no longer in steady state. As always after we have made a modification, we need to run the dynamics to get back to steady state. But before we do that, we also want to match the growth rates again because they will of course have increased by increasing the resource abundance. So we do

```{r message=FALSE, warning=FALSE}
cel_model <- cel_model |> matchGrowth() |> steady()
```

This has now messed up the biomasses in the model:

```{r warning=FALSE}
plotBiomassVsSpecies(cel_model)
```

So we also do

```{r message=FALSE, warning=FALSE}
cel_model <- cel_model |> matchGrowth() |> steady()
```

This is what the feeding levels look like now:

```{r}
plotFeedingLevel(cel_model)
```

A little bit better but clearly not enough. So we need to do it again. But you will already have gotten the sense that this is going to be tedious: making the change, running to steady state, plotting the result, trying again ....

### Shiny gadget

We will now introduce a shiny gadget (that is [a technical term] (https://shiny.rstudio.com/articles/gadgets.html)) that greatly facilitates this iterative tuning of the model. The gadget allows quick experimentation with changes to model parameters. It provides sliders for adjusting model parameters and tabs with various plots to immediately see the result of the changes. You can choose which parameter sliders and which plot tabs to include.

We start the gadget by calling the `tuneParams()` function.

```{r warning=FALSE, message=FALSE, eval=FALSE}
cel_model <- tuneParams(cel_model)
```

This will open the gadget in your web browser with our current model `cel_model` loaded. The following video shows what we do on that web page. After making the changes we want to make, we click the "Return" button in the gadget and the `tuneParams()` function returns the model in that updated state. The above code then assigns that updated model to the variable `cel_model`.

```{r}
#| echo: false
vembedr::embed_url("https://youtu.be/BJK26AvshQ4") |>
   vembedr::use_align("center") |>
   vembedr::use_rounded(10)
```

Now feel free to experiment with the `tuneParams()` gadget a bit. We will however also use it together in the next tutorial to match observed landings.

When you are done, save your model for use in the next tutorial:
```{r eval=FALSE}
saveParams(cel_model, "cel_model_refined.rds")
```

<!-- Next we will use the gadget to refine our model using diet data. -->

<!-- ## Diet data -->

<!-- ### Distribution of ppmr based on stomach data and mizer model -->

<!-- First, we load our mizer model and the stomach data collated by [Thompson et al. 2020](https://doi.org/10.1111/1365-2664.13662). Then we create a species list that we use to get a subset of the stomach data. We will be working with data sourced from the Integrated Database and Portal for Fish Stomach Records `Dapstom` and explore the distribution of `ppmr` across `pred_weight_g`. -->

<!-- ```{r} -->
<!-- stomach <- readRDS("dapstom_data.rds") -->
<!-- ``` -->

<!-- ### Distribution of ppmr -->

<!-- To allow comparison with the mizer model results, we require that our species names are matched. Then we plot the relationship of predator weight in grams with log of ppmr. -->

<!-- ```{r warning=FALSE, message=FALSE} -->
<!-- stomach |> -->
<!--     filter(pred_species == "Mackerel") |> -->
<!--     ggplot(aes(x = log(pred_weight_g), y = log_ppmr)) + -->
<!--     geom_point() + -->
<!--     geom_smooth(aes(weight = prey_ind_weight_g), se = TRUE) + -->
<!--   ggtitle("PMMR distribution - stomach")+ -->
<!--   xlab("log of predator weight [g]") + ylab("Log of predator/prey mass ratio") -->
<!-- ``` -->

<!-- The red curves represent the smoothed mean weighed by biomass and there are indications to show a lot of over-plotting especially at smaller and larger predator sizes, where fewer observations were recorded. We also observe vertical stripes in most plots, which can be explained by the rounding of the predator size during data recording. -->

<!-- Having looked at the relationships of predator/prey mass ratio with predator size based on the stomach data, next will be to explore these relationship but now using the mean predator/prey mass ratio extracted from mizer `params` object. -->

<!-- ```{r message=FALSE} -->
<!-- #The mean predator/prey mass ratio can be derived from the mizer model by calling the function `getMeanLogPPMR. -->
<!-- # @param params A MizerParams object -->
<!-- # @return A matrix (predator species x predator size) holding the mean predator/prey mass ratio for predators of the given species and size. -->
<!-- getMeanLogPPMR <- function(params, exponent = 1/3) { -->
<!--   no_sp <- nrow(params@species_params) -->
<!--   no_w <- length(params@w) -->
<!--   no_w_full <- length(params@w_full) -->
<!--   fish_sel <- (no_w_full - no_w + 1):no_w_full -->
<!--   phi <- pred_kernel(params) -->
<!--   theta_n <- outer(params@species_params$interaction_resource, -->
<!--                    params@initial_n_pp) -->
<!--   theta_n[, fish_sel] <- theta_n[, fish_sel] + -->
<!--     params@interaction %*% params@initial_n -->
<!--   theta_n_phi <- sweep(phi, c(1, 3), theta_n, "*") -->
<!--   denom <- rowSums(sweep(theta_n_phi, 3,  -->
<!--                          params@dw_full * params@w_full^exponent * -->
<!--                              log(params@w_full), "*"),  -->
<!--                    dims = 2) -->
<!--   num <- rowSums(sweep(theta_n_phi, 3,  -->
<!--                        params@dw_full * params@w_full^exponent, "*"),  -->
<!--                  dims = 2) -->
<!--   log_w <- matrix(log(params@w), nrow = no_sp, ncol = no_w, byrow = TRUE) -->
<!--   log_ppmr <- log_w - denom / num -->
<!--   return(log_ppmr) -->
<!-- } -->

<!-- # the getMeanLogPPMR extracts the ppmr data from the Mizerparams object. We set exponent at 4/3 to cater for digestion. -->
<!-- ppmr_m <- getMeanLogPPMR(params, exponent = 4/3) -->

<!-- #We convert the data into the long table format using `melt` function. This makes it easy to apply `ggplot2` to plot a scatter plot of  `pred_weight` against `log(ppmr)`. -->

<!-- ppmr_m <- melt(ppmr_m, id.vars = c("sp", "w_pred"))%>% -->
<!--   rename(predator_species = sp) -->

<!-- ppmr_m<-ppmr_m%>% -->
<!--   mutate(log_ppmr = log(value), log_pred_weight_g = log(w_pred)) #creates a new column with similar name as that created for stomach data -->
<!-- ggplot(ppmr_m, aes(x = log_pred_weight_g, y = log_ppmr)) +         geom_point()+ -->
<!--   geom_smooth(col = "green", size = 1)+ -->
<!--   facet_wrap(~predator_species, ncol = 3, scales = "free")+ -->
<!--   ggtitle("PMMR distribution - stomach")+ -->
<!--    xlab("log of predator weight [g])") +  -->
<!--   ylab("Log of predator/prey mass ratio") -->
<!-- ``` -->

<!-- The plots show the values in black derived from the model and the smoothed mean curves in green. In general large size individuals are consuming relatively smaller prey items. This is evidenced by the bump at around log 5-6 predator size. We also note that the smoothed means across all species do not exceed log of 1.6. -->

<!-- We will now plot the model and stomach into one plot for easy of visualisation and comparison. Unlike the previous scatter plots using the stomach data, we will use colour to indicate the density of points. The scatter plot will be created using binned data in both the x and y direction and logarithmic scale applied to indicate the number of observations in each bin. -->

<!-- ```{r warning=FALSE, message=FALSE} -->
<!-- stomach|>ggplot( aes(x = log(pred_weight_g), y = log_ppmr)) + -->
<!--     stat_summary_2d(aes(z = prey_weight_g), -->
<!--                     fun = "sum", bins = 60) +  -->
<!--     scale_fill_viridis_c(trans = "log") + -->
<!--   geom_smooth(aes(weight = prey_weight_g),col = "red", size = 1)+ -->
<!--   facet_wrap(~predator_species, ncol = 3, scales = "free")+ -->
<!--   geom_line(data = ppmr_m, aes(log_pred_weight_g, log_ppmr), col = "green", size = 1)+ -->
<!--   facet_wrap(~predator_species, ncol = 3, scales = "free")+ -->
<!--   labs(x = "log (predator weight)", y = "log (ppmr)")+ -->
<!--   ggtitle("Combined plot showing the fits on the stomach data (red) and mizer model (green)") -->

<!-- ``` -->

<!-- Lets zoom in on one species `Blue whiting` -->

<!-- ```{r warning=FALSE, message=FALSE} -->
<!-- stomach|>filter (predator_species =='Blue whiting')|> -->
<!--                  ggplot( aes(x = log(pred_weight_g), y = log_ppmr)) + -->
<!--     stat_summary_2d(aes(z = prey_weight_g), -->
<!--                     fun = "sum", bins = 60) +  -->
<!--     scale_fill_viridis_c(trans = "log") + -->
<!--   geom_smooth(aes(weight = prey_weight_g),col = "red", size = 1)+ -->
<!--   facet_wrap(~predator_species, ncol = 3, scales = "free")+ -->
<!--   geom_line(data = filter(ppmr_m, predator_species == 'Blue whiting'), aes(log_pred_weight_g, log_ppmr), col = "green", size = 1)+ -->
<!--   facet_wrap(~predator_species, ncol = 3, scales = "free")+ -->
<!--   labs(x = "log (predator weight)", y = "log (ppmr)")+ -->
<!--   ggtitle("Combined plot showing the fits on the stomach (red) and mizer model (green)") -->

<!-- ``` -->

<!-- The observation from the stomach data are represented using the colored bins with the yellow bins indicating a high density of observations. The huge number of observations appears to occur in relatively larger predators particularly for cod, haddock and whiting. A red smooth line is fitted on the stomach scatter plots showing there is over-fitting but now at the smaller predator sizes. -->

<!-- Also plotted are the green smoothed curves from the mizer model. Overall, the green and red smoothed curves show there are differences between the stomach and mizer model, with the latter showing lower predator/prey mass ratios at all predator sizes for the seven species. -->

<!-- The next figure shows the distribution of the log of the predator/prey mass ratio as a violin plot. We work with 10 predator size classes and for each size class we show the distribution. -->

<!-- ```{r warning=FALSE, message=FALSE} -->
<!-- binned <- stomach %>%  -->
<!--     # bin data -->
<!--     mutate(bin = cut_number(pred_weight_g *  -->
<!--                                 rnorm(length(pred_weight_g), 1, 0.1),  -->
<!--                             10)) -->

<!-- ggplot(binned, aes(bin, log_ppmr)) + -->
<!--     geom_violin(aes(weight = prey_count), -->
<!--                 draw_quantiles = 0.5) + -->
<!--   facet_wrap(~predator_species, ncol = 3, scales = "free")+ -->
<!--     xlab("Predator weight [g]") + -->
<!--     ylab("Log of predator/prey mass ratio") -->
<!-- ``` -->

<!-- There are observational artefacts with the stomach, which may be due to small prey items not being measured. Perhaps, averaging the predator/prey mass ratio over these observations, would help improve the distribution. -->

<!-- ```{r warning=FALSE, message=FALSE} -->
<!-- ggplot(binned, aes(bin, log_ppmr)) + -->
<!--     geom_violin(aes(weight = prey_weight_g), -->
<!--                 draw_quantiles = 0.5) + -->
<!--      facet_wrap(~predator_species, ncol = 3, scales = "free")+ xlab("Predator weight [g]") + -->
<!--     ylab("Log of predator/prey mass ratio") -->
<!-- ``` -->

<!-- The violin plots now shows how the prey biomass is distributed over the log predator/prey mass ratio for different predator size classes. These distributions look much more normal for certain species (e.g. cod, megrim, whiting) where they seem to not depend much on the predator size class. A different distribution is evident among the European hake, monkfish, Norway pout. -->

<!-- Let's fit a normal distribution and check the type of distribution. -->

<!-- ```{r warning=FALSE} -->
<!-- weighted.sd <- function(x, w) { -->
<!--   sqrt(sum(w * (x - weighted.mean(x, w))^2)) -->
<!-- } -->


<!-- est_mean = weighted.mean(stomach$log_ppmr, stomach$prey_weight_g /  -->
<!--     sum(stomach$prey_weight_g)) -->

<!-- est_sd = weighted.sd(stomach$log_ppmr, stomach$prey_weight_g /  -->
<!--     sum(stomach$prey_weight_g)) -->


<!-- ggplot(stomach |> filter(log_ppmr < 12)) + -->
<!--     geom_density(aes(log_ppmr,  -->
<!--                      weight = prey_weight_g)) + -->
<!--   stat_function(fun = dnorm,  -->
<!--                   args = list(mean = est_mean+ est_sd^2,  -->
<!--                               sd = est_sd),  -->
<!--                   colour = "blue") + -->
<!--      facet_wrap(~predator_species, ncol = 3)+ -->
<!--     xlab("Log of Predator/Prey mass ratio") + -->
<!--     ylab("Normalised biomass density") -->
<!-- ``` -->

<!-- It is clear that normal distribution works only for few species. -->

<!-- The comparisons between stomach data and mizer model can therefore be used to adjust our `beta` values to be in line with the observation. -->

<!-- ## In preparation -->



<!-- ```{r eval=FALSE} -->
<!-- saveParams(cel_model, "cel_model_diet.rds") -->
<!-- ``` -->
